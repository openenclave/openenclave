// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

/* Prevent Branch Indexing from triggering a build. This is necessary because
   Branch Indexing will trigger a build for every Pull Request in the repository
   every time it occurs and waste resources.
*/
build_cause = currentBuild.getBuildCauses().toString()
if (build_cause.contains('BranchIndexingCause')) {
  currentBuild.result = 'ABORTED'
  error("Branch Indexing is not allowed. Please trigger manually or via a pull request.")
} else {
  println("Build cause: ${build_cause}")
}

/* A list of regex that includes directories and files to be ignored for CI builds.
  This is used as a grep extended regular expression.
  See https://www.gnu.org/software/grep/manual/html_node/Basic-vs-Extended.html
*/
List<String> LIST_IGNORED_DIRS = [
    '^docs',
    '^.jenkins/infrastructure',
    '^.jenkins/docker',
    '^.github',
    '.md\$',
    '^VERSION\$',
    '^OWNERS\$'
]

// This joins list into regex string to be used in git diff
String IGNORED_DIRS_REGEX = LIST_IGNORED_DIRS.join('|')

List<String> APPROVED_AUTHORS = [
    'anakrish',
    'arlynch',
    'asvrada',
    'CyanDevs',
    'dcarpente',
    'justanotherminh',
    'mingweishih',
    'radhikaj',
    'vtikoo'
]

pipeline {
    agent any
    options {
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '90', artifactNumToKeepStr: '180', daysToKeepStr: '90', numToKeepStr: '180'))
        disableConcurrentBuilds(abortPrevious: true)
    }
    parameters {
        string(name: 'PULL_REQUEST_ID', defaultValue: '', description: '[Optional] If testing a PR - enter PR #', trim: true)
        string(name: 'REPOSITORY_NAME', defaultValue: 'openenclave/openenclave', description: '[Optional] If testing a branch - enter GitHub repository to checkout', trim: true)
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: '[Optional] If testing a branch - enter branch to checkout', trim: true)
        booleanParam(name: 'FULL_TEST_SUITE', defaultValue: false, description: 'Run all tests')
        booleanParam(name: 'FORCE_TEST', defaultValue: false, description: 'Force tests to continue even if there are no changes compared to master')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Version of Docker image "oetools" to use', trim: true)
        string(name: "OECI_LIB_VERSION", defaultValue: 'master', description: 'Version of OE Libraries to use', trim: true)
    }
    stages {
        stage('Check access') {
            when {
                /* This checks access when a build is ran in a multibranch pipeline job and is triggered
                   when GitHub pull request is created or updated with a new or (forced) different commit.
                   This stage is skipped if a build is triggered manually.
                */
                allOf {
                    expression { params.PULL_REQUEST_ID == "" }
                    // env.CHANGE_ID is only set when a build is triggered by a multibranch pipeline job.
                    expression { env.CHANGE_ID != null && env.CHANGE_ID.isInteger() }
                }
            }
            steps {
                retry(5) {
                    sh """
                        while sudo lsof /var/lib/dpkg/lock-frontend | grep dpkg; do sleep 3; done
                        sudo apt-get -y --option Acquire::Retries=5 install jq
                    """
                }
                script {
                    PR_AUTHOR = sh(
                        script: "curl --silent https://api.github.com/repos/openenclave/openenclave/pulls/${env.CHANGE_ID} | jq --raw-output '.user | .login'",
                        returnStdout: true
                    ).trim()
                    if ( PR_AUTHOR == 'null' || PR_AUTHOR == '' || PR_AUTHOR == null ) {
                        error("No pull request author found. This is an unexpected error. Does the pull request ID exist?")
                    } else if ( APPROVED_AUTHORS.contains(PR_AUTHOR) ) {
                        println("Pull request author ${PR_AUTHOR} is authorized. Build will continue.")
                    } else {
                        currentBuild.result = 'ABORTED'
                        error("Pull request author ${PR_AUTHOR} is not in the list of authorized users. Aborting build.")
                    }
                }
            }
        }
        stage('Determine changes') {
            /* This stage is used to determine whether to skip the main testing stage
               if the changes are only in ignored directories or files. 
               This is only necessary for Jenkins multibranch pipeline builds.
            */
            steps {
                script {
                    continue_build = false
                    dir("${WORKSPACE}") {
                        if ( env.CHANGE_ID != null && env.CHANGE_ID.isInteger() ) {
                            // This is the git ref in a Jenkins multibranch pipeline build
                            SOURCE_BRANCH = "origin/PR-${env.CHANGE_ID}"
                        } else if ( params.PULL_REQUEST_ID ) {
                            // This is the git ref for a manual PR build
                            SOURCE_BRANCH = "origin/pr/${params.PULL_REQUEST_ID}"
                        } else if ( params.BRANCH_NAME != "master" ) {
                            // This is the git ref for a manual branch build
                            SOURCE_BRANCH = "origin/${params.BRANCH_NAME}"
                        } else {
                            error("Invalid branch reference. Did you set the PULL_REQUEST_ID or BRANCH_NAME parameters?")
                        }
                        CHANGED_FILES = sh(
                            returnStdout: true,
                            script: """
                                git diff --name-only \$(git merge-base origin/master ${SOURCE_BRANCH})..${SOURCE_BRANCH} \
                                | grep --invert-match --extended-regexp \'${IGNORED_DIRS_REGEX}\'  --no-messages || test \$? = 1
                                """
                        )
                        if ( CHANGED_FILES != '' ) {
                            println("Detected the follow file changes: " + CHANGED_FILES)
                            continue_build = true
                        } else {
                            println("No changes detected. Skipping main testing stage.")
                        }
                    }
                }
            }
        }
        stage('Load library') {
            when {
                expression { return continue_build }
            }
            steps {
                script {
                    library "OpenEnclaveJenkinsLibrary@${params.OECI_LIB_VERSION}"
                }
            }
        }
        stage('Set PULL_REQUEST_ID') {
            /* This stage sets PULL_REQUEST_ID so that the downstream pipelines can use it.
            *  The variable is necessary when a build is:
            *    triggered by a multibranch pipeline job
            *    OR is manually triggered with params.PULL_REQUEST_ID set.
            */
            when {
                expression { return continue_build }
                anyOf {
                    // env.CHANGE_ID is only set when a build is triggered by a multibranch pipeline job.
                    expression { env.CHANGE_ID != null }
                    // params.PULL_REQUEST_ID is set when a build is manually triggered and the parameter is set by the user.
                    expression { params.PULL_REQUEST_ID != "" }
                }
            }
            steps {
                script {
                    PULL_REQUEST_ID = env.CHANGE_ID ?: params.PULL_REQUEST_ID
                }
            }
        }
        stage("Trigger downstream pipelines") {
            when {
                anyOf {
                    expression { return continue_build }
                    expression { return params.FORCE_TEST }
                }
            }
            parallel {
                stage('Agnostic Linux') {
                    steps {
                        build job: '/OpenEnclave/Agnostic-Linux',
                            parameters: [
                                string(name: 'PULL_REQUEST_ID', value: PULL_REQUEST_ID),
                                string(name: 'REPOSITORY_NAME', value: params.REPOSITORY_NAME),
                                string(name: 'BRANCH_NAME', value: params.BRANCH_NAME),
                                string(name: 'DOCKER_TAG', value: params.DOCKER_TAG),
                                string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ubuntu-nonsgx"]),
                                string(name: 'OECI_LIB_VERSION', value: params.OECI_LIB_VERSION),
                                booleanParam(name: 'FULL_TEST_SUITE', value: params.FULL_TEST_SUITE)
                            ]
                    }
                }
                stage('Azure Linux') {
                    steps {
                        build job: '/OpenEnclave/Azure-Linux',
                            parameters: [
                                string(name: 'PULL_REQUEST_ID', value: PULL_REQUEST_ID),
                                string(name: 'REPOSITORY_NAME', value: params.REPOSITORY_NAME),
                                string(name: 'BRANCH_NAME', value: params.BRANCH_NAME),
                                string(name: 'DOCKER_TAG', value: params.DOCKER_TAG),
                                string(name: 'UBUNTU_2004_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["acc-ubuntu-20.04"]),
                                string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ubuntu-nonsgx"]),
                                string(name: 'WS2022_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ws2022-nonsgx"]),
                                string(name: 'OECI_LIB_VERSION', value: params.OECI_LIB_VERSION),
                                booleanParam(name: 'FULL_TEST_SUITE', value: params.FULL_TEST_SUITE)
                            ]
                    }
                }
                stage('Azure Windows') {
                    steps {
                        build job: '/OpenEnclave/Azure-Windows',
                            parameters: [
                                string(name: 'PULL_REQUEST_ID', value: PULL_REQUEST_ID),
                                string(name: 'REPOSITORY_NAME', value: params.REPOSITORY_NAME),
                                string(name: 'BRANCH_NAME', value: params.BRANCH_NAME),
                                string(name: 'DOCKER_TAG', value: params.DOCKER_TAG),
                                string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ubuntu-nonsgx"]),
                                string(name: 'WS2022_DCAP_CFL_LABEL', value: globalvars.AGENTS_LABELS["acc-win2022-dcap"]),
                                string(name: 'WS2022_DCAP_ICX_LABEL', value: globalvars.AGENTS_LABELS["acc-v3-win2022-dcap"]),
                                string(name: 'OECI_LIB_VERSION', value: params.OECI_LIB_VERSION),
                                booleanParam(name: 'FULL_TEST_SUITE', value: params.FULL_TEST_SUITE)
                            ]
                    }
                }
                stage('Intel Linux') {
                    steps {
                        build job: '/OpenEnclave/Intel-Agnostic',
                            parameters: [
                                booleanParam(name: 'FULL_TEST_SUITE', value: params.FULL_TEST_SUITE)
                            ],
                            propagate: false

                    }
                }
            }
        }
    }
}
